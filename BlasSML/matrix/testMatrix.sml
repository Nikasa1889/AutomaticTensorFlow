open Matrix
val a = fromList2Vec (1.0::2.0::3.0::4.0::5.0::6.0::nil)
val X = fromVec(a, (2, 3))
val _ = printMat( X )
val Y = fromLists ([[1.0, 2.0, 3.0], [2.0, 3.0, 4.0]], (2, 3))
val _ = printMat( Y )
val b = fromList2Vec (1.0::2.0::3.0::4.0::5.0::6.0::nil)
val _ = print(Real.toString(ddot(a, b)))
val _ = print("\n");
val _ = printVec (dotmul(a, b))
val _  = dappSigm(a)
val _ = printVec (a)
val _ = dset(a, 1.0)
val _ = printVec (a)
val c = dcopy (a)
val _ = dset(c, 2.0)
val _ = printVec(c)
val _ = printVec(a)
val _ = dscal(2.0, c)
val _ = printVec(c)
val _ = daxpy(1.0, a, c)
val _ = printVec(c)
val _ = print(Real.toString(dnrm2(a)))
val _ = print("\n")
val _ = printMat(dreprows(a, 3))

val A = fromLists ([[1.0, 2.0, 3.0], [2.0, 3.0, 4.0]], (2, 3))
val B = fromLists ([[2.0, 3.0], [3.0, 4.0], [4.0, 5.0]], (3, 2))
val C = newMat (2, 2)
val _ = dgemm( NOTRANS, NOTRANS, 1.0, A, B, 0.0, C)
val _ = printMat(C)

val x = fromList2Vec (1.0::2.0::3.0::nil)
val y = newVec( 2 )
val _ = dgemv( NOTRANS, 1.0, A, x, 0.0, y)
val _ = printVec( y )

val _ = freeVec (y)
val _ = freeVec (x)
val _ = freeMat (C)

val _ = print ("----")
val x = newVec(2)
val _ = sumRows (B, x)
val _ = printVec (x)
val _ = sumCols (A, x)
val _ = printVec (x)
val _ = printMat (drepcols (x, 3))
val _ = mdscal (2.0, A)
val _ = printMat (A)
val y = fromList2Vec (1.0::2.0::3.0::nil)
val _ = mdscalRows (B, y)
val _ = printMat (B)
val _ = maxCols (B, y)
val _ = printVec (y)
val _ = maxColsIdx (B, y)
val _ = printVec (y)
val _ = print(Real.toString(sumAll(B)))
val _ = print("\n")

val _ = freeMat (B)
val _ = freeMat (A)
val _ = freeVec (x)
val _ = freeVec (y)

val y = fromList2Vec (1.0::4.0::3.0:: ~1.0::nil)
val x = fromList2Vec (1.0::2.0::4.0:: ~1.0::nil)
val _ = print(Int.toString(eqcount(x, y)))
val _ = print("\n")

val A = fromLists ([[1.0, 2.0, 3.0], [2.0, 3.0, 4.0]], (2, 3))
val B = fromLists ([[1.0, 2.0, 3.0], [2.1, 3.0, 4.0]], (2, 3))
val _ = print(Bool.toString(meq(A, B)))
val _ = print("\n")

val _ = freeMat(A)
val _ = freeMat(B)
val A = fromLists ([[1.0, 2.0, 3.0], [2.0, 3.0, 4.0]], (2, 3))
val B = fromLists ([[1.0, 2.0, 3.0], [2.0, 3.0, 4.0]], (2, 3))
val C = newMat (3, 3)
val _ = dgemm( TRANS, NOTRANS, 1.0, A, B, 0.0, C)
val _ = printMat(C)